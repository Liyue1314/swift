{"name":"Swift","tagline":"The Swift Programming Language","body":"<img src=\"https://swift.org/assets/images/swift.svg\" alt=\"Swift logo\" height=\"70\" >\r\n# Swift Programming Language\r\n\r\n**Welcome to Swift!**\r\n\r\nSwift is a high-performance system programming language.  It has a clean\r\nand modern syntax, offers seamless access to existing C and Objective-C code\r\nand frameworks, and is memory safe (by default).\r\n\r\nAlthough inspired by Objective-C and many other languages, Swift is not itself a\r\nC-derived language. As a complete and independent language, Swift packages core\r\nfeatures like flow control, data structures, and functions, with high-level\r\nconstructs like objects, protocols, closures, and generics. Swift embraces\r\nmodules, eliminating the need for headers and the code duplication they entail.\r\n\r\n\r\n## Documentation\r\n\r\nTo read the documentation, start by installing the\r\n[Sphinx](http://sphinx-doc.org) documentation generator tool (just run\r\n`easy_install -U Sphinx` from the command line and you're good to go). Once you\r\n have that, you can build the Swift documentation by going into `docs` and\r\ntyping `make`. This compiles the `.rst` files in the `docs` directory into\r\nHTML in the `docs/_build/html` directory.\r\n\r\nA potentially useful document to start is `docs/LangRef`, which gives a low level\r\ntour of how the language works from the implementation perspective.\r\n\r\nMany of the docs are out of date, but you can see some historical design\r\ndocuments in the `docs` directory.\r\n\r\nAnother source of documentation is the standard library itself, located in\r\n`stdlib`. Much of the language is actually implemented in the library\r\n(including `Int`), and the standard library gives some examples of what can be\r\nexpressed today.\r\n\r\n\r\n## Getting Started\r\n\r\nThese instructions give the most direct path to a working Swift\r\ndevelopment environment. Options for doing things differently are\r\ndiscussed below.\r\n\r\n\r\n### System Requirements\r\n\r\nOS X, Ubuntu Linux LTS, and the latest Ubuntu Linux release are the current\r\nsupported host development operating systems.\r\n\r\nFor OS X, you need [the latest Xcode](https://developer.apple.com/xcode/downloads/).\r\n\r\nFor Ubuntu, you'll need the following development dependencies:\r\n\r\n    sudo apt-get install git cmake ninja-build clang uuid-dev libicu-dev icu-devtools libbsd-dev libedit-dev libxml2-dev libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config\r\n\r\nNote: LLDB currently requires at least swig-1.3.40 but will successfully build\r\nwith version 2 shipped with Ubuntu.\r\n\r\nIf you are building on Ubuntu 14.04 LTS, you'll need to upgrade your clang\r\ncompiler for C++14 support and create a symlink:\r\n\r\n     sudo apt-get install clang-3.6\r\n     sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.6 100\r\n     sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.6 100\r\n\r\n### Getting Sources for Swift and Related Projects\r\n\r\n**Via HTTPS**  For those checking out sources as read-only, HTTPS works best:\r\n\r\n    git clone https://github.com/apple/swift.git\r\n    cd swift\r\n    ./utils/update-checkout --clone\r\n\r\n**Via SSH**  For those who plan on regularly making direct commits,\r\ncloning over SSH may provide a better experience (which requires\r\nuploading SSH keys to GitHub):\r\n\r\n    git clone git@github.com:apple/swift.git\r\n    cd swift\r\n    ./utils/update-checkout --clone-via-ssh\r\n\r\n[CMake](http://cmake.org) is the core infrastructure used to configure builds of\r\nSwift and its companion projects; at least version 2.8.12.2 is required. Your\r\nfavorite Linux distribution likely already has a CMake package you can install.\r\nOn OS X, you can download the [CMake Binary Distribution](https://cmake.org/install),\r\nbundled as an application, copy it to /Applications, and add the embedded\r\ncommand line tools to your `PATH`:\r\n\r\n    export PATH=/Applications/CMake.app/Contents/bin:$PATH\r\n\r\n[Ninja](https://ninja-build.org) is the current recommended build system\r\nfor building Swift and is the default configuration generated by CMake. If\r\nyou're on OS X or don't install it as part of your Linux distribution, clone\r\nit next to the other projects and it will be bootstrapped automatically:\r\n\r\n    git clone https://github.com/ninja-build/ninja.git\r\n\r\nor\r\n\r\n    git clone git@github.com:ninja-build/ninja.git\r\n\r\nYou can also install CMake and Ninja on OS X using a third-party\r\npackaging tool like [Homebrew](http://brew.sh)…\r\n\r\n    brew install cmake ninja\r\n\r\n…or [MacPorts](https://macports.org).\r\n\r\n    sudo port install cmake ninja\r\n\r\n### Building Swift\r\n\r\nThe `build-script` is a high-level build automation script that supports basic\r\noptions such as building a Swift-compatible LLDB, building the Swift Package\r\nManager, building for iOS, running tests after builds, and more. It also\r\nsupports presets which you can define for common combinations of build options.\r\n\r\nTo find out more:\r\n\r\n    utils/build-script -h\r\n\r\nNote: Arguments after \"--\" above are forwarded to `build-script-impl`, which is\r\nthe ultimate shell script that invokes the actual build and test commands.\r\n\r\nA basic command to build Swift and run basic tests with Ninja:\r\n\r\n    utils/build-script -t\r\n\r\n## Developing Swift in Xcode\r\n\r\nThe Xcode IDE can be used to edit the Swift source code, but it is not currently\r\nfully supported as a build environment for SDKs other than OS X. If you'd like\r\nto build for other SDKs but still use Xcode, once you've built Swift using Ninja\r\nor one of the other supported CMake generators, you can set up an IDE-only Xcode\r\nenvironment using the build-script's `-X` flag:\r\n\r\n    utils/build-script -X --skip-build -- --reconfigure\r\n\r\nThe `--skip-build` flag tells `build-script` to only generate the project,\r\nnot build it in its entirety. A bare minimum of LLVM tools will build in order\r\nto configure the Xcode projects.\r\n\r\nThe `--reconfigure` flag tells `build-script-impl` to run the CMake configuration\r\nstep even if there is a cached configuration. As you develop in Xcode, you may\r\nneed to rerun this from time to time to refresh your generated Xcode project,\r\npicking up new targets, file removals, or file additions.\r\n\r\n## Testing Swift\r\n\r\nSee [docs/Testing.rst](docs/Testing.rst).\r\n\r\n## Contributing to Swift\r\n\r\nContributions to Swift are welcomed and encouraged! Please see the [Contributing to Swift guide](https://swift.org/contributing/).\r\n\r\nTo be a truly great community, Swift.org needs to welcome developers from all\r\nwalks of life, with different backgrounds, and with a wide range of experience.\r\nA diverse and friendly community will have more great ideas, more unique\r\nperspectives, and produce more great code. We will work diligently to make the\r\nSwift community welcoming to everyone.\r\n\r\nTo give clarity of what is expected of our members, Swift has adopted the\r\ncode of conduct defined by the Contributor Covenant. This document is used\r\nacross many open source communities, and we think it articulates our values\r\nwell. For more, see [the website](https://swift.org/community/#code-of-conduct).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}